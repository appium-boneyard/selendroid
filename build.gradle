buildscript {
    repositories {
        jcenter()
    }

    ext.bintrayUser = project.hasProperty('bintrayUser') ? project.bintrayUser : System.getenv('BINTRAY_USER')
    ext.bintrayKey = project.hasProperty('bintrayKey') ? project.bintrayKey : System.getenv('BINTRAY_KEY')
    ext.bintrayEnabled = project.bintrayUser && project.bintrayKey

    dependencies {
        if (bintrayEnabled) {
            classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
        }
    }
}

apply from: 'properties.gradle'
group = selGroup

allprojects {
    repositories {
        jcenter()
    }

    version = selVersion

    ext {
        // https://bintray.com/android/android-tools/com.android.tools.build.gradle/view
        androidBuildToolsGradle = 'com.android.tools.build:gradle:1.5.0'
        // https://bintray.com/bintray/jcenter/com.jakewharton.sdkmanager:gradle-plugin
        sdkManager = 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        // https://bintray.com/bintray/jcenter/org.json%3Ajson/20090211/view
        json = 'org.json:json:20090211'
        seleniumVersion = '2.48.2'
        compileSdkVersion = 23
        buildToolsVersion = '23.0.0'
        minSdkVersion = 10
        targetSdkVersion = 16
        sourceCompatibilityVersion = 1.7
        targetCompatibilityVersion = 1.7
        junit = 'junit:junit:4.12'
    }

    // Bintray script
    if (bintrayEnabled) {
        apply plugin: 'com.jfrog.bintray'
        bintray {
            configurations = ['published', 'archives']
            user = bintrayUser
            key = bintrayKey
            pkg {
                repo = 'maven'
                name = "selendroid"
                websiteUrl = selWebsite
                issueTrackerUrl = selTracker
                vcsUrl = selGit
                desc = selDescription
                licenses = ['Apache-2.0']
                version {
                    name = "0.18.0-SNAPSHOT"
                    desc = selDescription
                }
            }
        }
    }

    configurations {
        published
    }

    plugins.withType(JavaPlugin) {
        // manifest.mainAttributes(provider: 'gradle')
        configurations {
            published
        }

        task sourceJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        // Add the sourceJars to non-extractor modules
        artifacts {
            published sourceJar
            published javadocJar
        }
    }
}
